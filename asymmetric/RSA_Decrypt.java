package asymmetric;

import java.math.BigInteger;

public class RSA_Decrypt {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BigInteger n = new BigInteger("5866938176422434271921512069549314558572444830595526747655696196745276456822608605385223725709605077516234389105822754542620635074145201138631512512375983");
		BigInteger e = new BigInteger("101");
		BigInteger d = new BigInteger("3543398304571965253338735012302061268048704303627001303039578891103582810556135328485407359156620778957671984674971193579237126945806702252908137885595909");
		BigInteger ct = new BigInteger("4310772241589107770839735432557110821061808764098562886423152040057402487755661517578050207009504986760571211925997744033269331654945961537150125262479161");
	//	BigInteger pow = ct.pow;
		
		BigInteger p = ct.modPow(d, n);
		
		System.out.println(new String(p.toByteArray()));
		
	}

}
